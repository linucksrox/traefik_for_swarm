version: '3.7'

#secrets:
#  traefik_cf-api-token:
#    external: true

services:

  traefik:
    image: traefik:v2.2
    networks:
      - traefik-public
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
#      - ./traefik_certificates.yml:/etc/traefik/traefik_certificates.yml
      - ./logs:/logs
      - ./routing:/routing
#    secrets:
#      - traefik_cf-api-token
#    environment:
#      - CLOUDFLARE_DNS_API_TOKEN_FILE=/run/secrets/traefik_cf-api-token
#      - CLOUDFLARE_PROPAGATION_TIMEOUT=300
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      - "8081:8081"
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
# Set up basicAuth on Traefik's dashboard
        - "traefik.http.routers.api.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
        - "traefik.http.routers.api.service=api@internal"
        - "traefik.http.routers.api.middlewares=auth"
        # Generated with htpasswd - if there is a $ in the encrypted password, you MUST escape it with another $, hence why they are always doubled up!
        # Default credentials = username: traefik, password: hackme
        - "traefik.http.middlewares.auth.basicauth.users=traefik:$$apr1$$j4pqzxls$$g/L2dmCrf/L8oBgE6nCRg1"
# Set up catch all router + middleware to redirect http to https by default (any hostname on web entrypoint)
        - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker"
        - "traefik.http.routers.exampledomain-wildcard.rule=Host(`*.exampledomain.com`)"
        - "traefik.http.routers.exampledomain-wildcard.tls=true"
        - "traefik.http.routers.exampledomain-wildcard.tls.certresolver=exampledomain"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        - "traefik.http.services.noop.loadbalancer.server.port=80"
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: start-first		# get new container running first before removing old, for less downtime
      rollback_config:
        order: start-first		# get new container running first before removing old, for less downtime

networks:

  traefik-public:
    driver: overlay
    name: traefik-public
